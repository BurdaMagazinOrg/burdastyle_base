<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_node_article_edit_form_alter().
 */
function burdastyle_article_form_node_article_edit_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_form_alter().
 */
function burdastyle_article_form_node_article_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_edit_form_alter().
 */
function burdastyle_article_form_node_magazine_products_edit_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_form_alter().
 */
function burdastyle_article_form_node_magazine_products_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function burdastyle_article_form_node_recipe_edit_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function burdastyle_article_form_node_recipe_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Helper function for article form alter hooks.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _burdastyle_article_form_alter_helper(&$form, FormStateInterface $form_state) {

  // Move promote fields to options group.
  // TODO: Remove when fully replaced with field_promote_states.
  $form['promote']['#disabled'] = TRUE;
  $form['promote_top_presenter']['#group'] = 'options';
  $form['promote_top_presenter']['#disabled'] = TRUE;
  $form['promote_front_presenter']['#group'] = 'options';
  $form['promote_front_presenter']['#disabled'] = TRUE;
  $form['promote_channel']['#group'] = 'options';
  $form['promote_channel']['#disabled'] = TRUE;
  $form['promote_channel_presenter']['#group'] = 'options';
  $form['promote_channel_presenter']['#disabled'] = TRUE;
  $form['is_landing_page']['#group'] = 'options';
  $form['is_landing_page']['#disabled'] = TRUE;
}

/**
 * Implements hook_node_prepare_form().
 */
function burdastyle_article_node_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {

  // Copy old promote states to field_promote_states when edit existing article node.
  // TODO: Remove when old promote states are migrated to field_promote_states.
  if ($entity->hasField('field_promote_states') && $operation == 'edit') {
    $promote_states = array();

    $old_promote_states = array(
      'promote' => 'front_page',
      'promote_channel' => 'channel_page',
      'promote_top_presenter' => 'top_presenter',
      'promote_front_presenter' => 'front_presenter',
      'promote_channel_presenter' => 'channel_presenter'
    );
    foreach ($old_promote_states as $old_promote_state => $new_promote_state) {
      if ($entity->{$old_promote_state}->value == 1) {
        $promote_states[] = $new_promote_state;
      }
    }

    // we need to preserve the state of all non-legacy values
    $enabled_states = array_map(function($el) {
      return $el['value'];
    }, $entity->field_promote_states->getValue());
    // this diff works b/c it is non-assoc
    $nonlegacy_enabled_states = array_diff($enabled_states, $old_promote_states);

    $entity->field_promote_states->setValue(array_merge($promote_states, $nonlegacy_enabled_states));
  }
}

/**
 * Implements hook_entity_presave().
 */
function burdastyle_article_node_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // Copy new promote states to old promote states when saving article node.
  // TODO: Remove when old promote states are migrated to field_promote_states.
  if ($entity->hasField('field_promote_states')) {

    // Clear all old promote states.
    $old_promote_states = array(
      'promote',
      'promote_channel',
      'promote_top_presenter',
      'promote_front_presenter',
      'promote_channel_presenter'
    );
    foreach ($old_promote_states as $old_promote_state) {
      $entity->{$old_promote_state}->setValue(0);
    }

    // Map new promote states to old promote states.
    $promote_states_mapping = array(
      'front_page' => 'promote',
      'channel_page' => 'promote_channel',
      'top_presenter' => 'promote_top_presenter',
      'front_presenter' => 'promote_front_presenter',
      'channel_presenter' => 'promote_channel_presenter'
    );
    $new_promote_states = $entity->field_promote_states->getValue();
    foreach($new_promote_states as $new_promote_state) {
      if (array_key_exists($new_promote_state['value'], $promote_states_mapping)) {
        $field = $promote_states_mapping[$new_promote_state['value']];
        $entity->{$field}->setValue(1);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function burdastyle_article_preprocess_node(&$variables) {
  /* @var Node $node */
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];

  if ($node->bundle() == "article") {
    if (_burdastyle_article_display_created($node, $view_mode)) {
      $variables['timestamp'] = $node->created->value;
      $variables['created_timestamp'] = $node->created->value;
      $variables['changed_timestamp'] = $node->changed->value;
    }
    else {
      unset($variables['content']['field_created']);
      $variables['timestamp'] = '';
    }

    $author = $node->getOwner();

    // Build anonymous author teaser.
    $author_teaser = array(
      '#theme' => 'author_teaser',
      '#elements' => ['#user' => $author,],
      '#author_id' => 0,
      '#timestamp' => $variables['timestamp'],
      '#created_timestamp' => $variables['created_timestamp'] ?? '',
      '#changed_timestamp' => $variables['changed_timestamp'] ?? '',
    );

    if ($author->isActive()) {

      $author_forename = '';
      if (isset($author->field_forename)) {
        $author_forename = $author->field_forename->value;
      }
      elseif (isset($author->first_name)) {
        $author_forename = $author->first_name->value;
      }

      $author_surname = '';
      if (isset($author->field_surname)) {
        $author_surname = $author->field_surname->value;
      }
      elseif (isset($author->last_name)) {
        $author_surname = $author->last_name->value;
      }

      if (strpos($view_mode, 'amp') === 0) {
        $user_view_mode = 'amp_author_teaser';
      }
      else {
        $user_view_mode = 'author_teaser';
      }

      // Build author teaser.
      $author_teaser = array(
        '#author_id' => $node->getOwnerId(),
        '#author_forename' => $author_forename,
        '#author_surname' => $author_surname,
        '#author_url' => $author->url('canonical', ['absolute' => TRUE]),
        '#author_picture' => user_view($author, $user_view_mode),
      ) + $author_teaser;

    }

    $variables['author_teaser'] = $author_teaser;
  }
}

/**
 * Returns TRUE if the date should be displayed, FALSE otherwise.
 *
 * @param Node $node
 *
 * @param string $view_mode
 *
 * @return bool
 */
function _burdastyle_article_display_created(Node $node, $view_mode) {
  if (!in_array($view_mode, ['full', 'lazyloading', 'fb_instant_articles_rss'])) {
    return TRUE;
  }

  if (!isset($node->field_hide_created->value)) {
    return TRUE;
  }

  return !$node->field_hide_created->value;
}
