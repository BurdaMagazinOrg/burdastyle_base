<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;


/**
 * Implements hook_module_implements_alter().
 */
function burdastyle_article_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'entity_type_alter':
      $group = $implementations['burdastyle_article'];
      unset($implementations['burdastyle_article']);
      $implementations['burdastyle_article'] = $group;
      break;
  }
}

/**
 * Implements hook_form_node_article_edit_form_alter().
 */
function burdastyle_article_form_node_article_edit_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_form_alter().
 */
function burdastyle_article_form_node_article_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_edit_form_alter().
 */
function burdastyle_article_form_node_magazine_products_edit_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_node_article_form_alter().
 */
function burdastyle_article_form_node_magazine_products_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function burdastyle_article_form_node_recipe_edit_form_alter(&$form, FormStateInterface $form_state) {
  _burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function burdastyle_article_form_node_recipe_form_alter(&$form, FormStateInterface $form_state) {
	_burdastyle_article_form_alter_helper($form, $form_state);
}

/**
 * Helper function for article form alter hooks.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _burdastyle_article_form_alter_helper(&$form, FormStateInterface $form_state) {

  // Move promote fields to options group.
  // TODO: Remove when fully replaced with field_promote_states.
  $form['promote']['#disabled'] = TRUE;
  $form['promote_top_presenter']['#group'] = 'options';
  $form['promote_top_presenter']['#disabled'] = TRUE;
  $form['promote_front_presenter']['#group'] = 'options';
  $form['promote_front_presenter']['#disabled'] = TRUE;
  $form['promote_channel']['#group'] = 'options';
  $form['promote_channel']['#disabled'] = TRUE;
  $form['promote_channel_presenter']['#group'] = 'options';
  $form['promote_channel_presenter']['#disabled'] = TRUE;

  // attach libraries
  $form['#attached']['library'][] = 'burdastyle_article/publication_options';
}

/**
 * Implements hook_node_prepare_form().
 */
function burdastyle_article_node_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {

  // Copy old promote states to field_promote_states when edit existing article node.
  // TODO: Remove when old promote states are migrated to field_promote_states.
  if ($entity->hasField('field_promote_states') && $operation == 'edit') {
    $promote_states = array();

    $old_promote_states = array(
      'promote' => 'front_page',
      'promote_channel' => 'channel_page',
      'promote_top_presenter' => 'top_presenter',
      'promote_front_presenter' => 'front_presenter',
      'promote_channel_presenter' => 'channel_presenter'
    );
    foreach ($old_promote_states as $old_promote_state => $new_promote_state) {
      if ($entity->{$old_promote_state}->value == 1) {
        $promote_states[] = $new_promote_state;
      }
    }

    // we need to preserve the state of all non-legacy values
    $enabled_states = array_map(function($el) {
      return $el['value'];
    }, $entity->field_promote_states->getValue());
    // this diff works b/c it is non-assoc
    $nonlegacy_enabled_states = array_diff($enabled_states, $old_promote_states);

    $entity->field_promote_states->setValue(array_merge($promote_states, $nonlegacy_enabled_states));
  }
}

/**
 * Implements hook_entity_presave().
 */
function burdastyle_article_node_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // Copy new promote states to old promote states when saving article node.
  // TODO: Remove when old promote states are migrated to field_promote_states.
  if ($entity->hasField('field_promote_states')) {

    // Clear all old promote states.
    $old_promote_states = array(
      'promote',
      'promote_channel',
      'promote_top_presenter',
      'promote_front_presenter',
      'promote_channel_presenter'
    );
    foreach ($old_promote_states as $old_promote_state) {
      $entity->{$old_promote_state}->setValue(0);
    }

    // Map new promote states to old promote states.
    $promote_states_mapping = array(
      'front_page' => 'promote',
      'channel_page' => 'promote_channel',
      'top_presenter' => 'promote_top_presenter',
      'front_presenter' => 'promote_front_presenter',
      'channel_presenter' => 'promote_channel_presenter'
    );
    $new_promote_states = $entity->field_promote_states->getValue();
    foreach($new_promote_states as $new_promote_state) {
      if (array_key_exists($new_promote_state['value'], $promote_states_mapping)) {
        $field = $promote_states_mapping[$new_promote_state['value']];
        $entity->{$field}->setValue(1);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function burdastyle_article_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->field_promote_states) {
    $promote_states = $entity->field_promote_states->getValue();
    foreach($promote_states as $promote_state) {
      if ($promote_state['value'] == 'landing' && $entity && $entity->id()) {
        $generator = \Drupal::service('simple_sitemap.generator');
        $generator->setEntityInstanceSettings(
          'node',
          $entity->id(),
          ['index' => FALSE]
        );
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function burdastyle_article_node_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->field_promote_states) {
    $promote_states = $entity->field_promote_states->getValue();
    foreach($promote_states as $promote_state) {
      if ($promote_state['value'] == 'landing' && $entity && $entity->id()) {
        $generator = \Drupal::service('simple_sitemap.generator');
        $generator->setEntityInstanceSettings(
          'node',
          $entity->id(),
          ['index' => FALSE]
        );
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function burdastyle_article_preprocess_node(&$variables) {
  /* @var Node $node */
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];

  if ($node->bundle() == "article") {
    if (_burdastyle_article_display_created($node, $view_mode)) {
      $variables['timestamp'] = $node->created->value;
      $variables['created_timestamp'] = $node->created->value;
      $variables['changed_timestamp'] = $node->changed->value;
    }
    else {
      unset($variables['content']['field_created']);
      $variables['timestamp'] = '';
    }

    $author = $node->getOwner();

    // Build anonymous author teaser.
    $author_teaser = array(
      '#theme' => 'author_teaser',
      '#elements' => ['#user' => $author,],
      '#author_id' => 0,
      '#timestamp' => $variables['timestamp'],
      '#created_timestamp' => $variables['created_timestamp'] ?? '',
      '#changed_timestamp' => $variables['changed_timestamp'] ?? '',
    );

    $author_forename = '';
    if (isset($author->field_forename)) {
      $author_forename = $author->field_forename->value;
    }
    elseif (isset($author->first_name)) {
      $author_forename = $author->first_name->value;
    }

    $author_surname = '';
    if (isset($author->field_surname)) {
      $author_surname = $author->field_surname->value;
    }
    elseif (isset($author->last_name)) {
      $author_surname = $author->last_name->value;
    }

    if (strpos($view_mode, 'amp') === 0) {
      $user_view_mode = 'amp_author_teaser';
    }
    else {
      $user_view_mode = 'author_teaser';
    }

    // Build author teaser.
    $author_teaser = array(
      '#author_id' => $node->getOwnerId(),
      '#author_forename' => $author_forename,
      '#author_surname' => $author_surname,
      '#author_url' => $author->url('canonical', ['absolute' => TRUE]),
      '#author_picture' => user_view($author, $user_view_mode),
    ) + $author_teaser;

    $variables['author_teaser'] = $author_teaser;
  }
}

/**
 * Implements hook_paragraph_view_alter()
 *
 * We wish to remove nodes that are landing pages from content_teaser
 * paragraphs.
 */
function burdastyle_article_paragraph_view_alter(array &$build, $entity, $display) {
  if ($entity->bundle() == 'content_teaser') {
    if (!isset($build['field_nodes']['#items']) || !$build['field_nodes']['#items']) {
      return;
    }

    // Get the referenced nodes
    foreach ($build['field_nodes']['#items'] as $idx => $entity_reference_item) {
      $value = $entity_reference_item->getValue();
      if (isset($value['target_id']) && $value['target_id']) {
        $references[$idx] = $value['target_id'];
      }
    }
    // load them
    $referenced_nodes = entity_load_multiple('node', $references);

    // iterate over them and remove those that are landing pages
    $idx = 0;
    foreach ($referenced_nodes as $node) {
      if ($promo = $node->get('field_promote_states')->getValue()) {
        foreach ($promo as $value) {
          if ($value['value'] == 'landing') {
            unset($build['field_nodes']['#items'][$idx]);
          }
        }
      }
      $idx++;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function burdastyle_article_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['user']->setAccessClass('Drupal\burdastyle_article\BurdaStyleUserAccessHandler');
  if (!empty($entity_types['node'])) {
    $entity_types['node']->setFormClass('fmm_edit_plus', 'Drupal\thunder_article\Form\ThunderNodeForm');
    $entity_types['node']->setFormClass('fmm_edit_edit_plus', 'Drupal\thunder_article\Form\ThunderNodeForm');
  }
}

/**
 * Returns TRUE if the date should be displayed, FALSE otherwise.
 *
 * @param Node $node
 *
 * @param string $view_mode
 *
 * @return bool
 */
function _burdastyle_article_display_created(Node $node, $view_mode) {
  if (!in_array($view_mode, ['full', 'lazyloading', 'fb_instant_articles_rss'])) {
    return TRUE;
  }

  if (!isset($node->field_hide_created->value)) {
    return TRUE;
  }

  return !$node->field_hide_created->value;
}


/**
 * Implements hook_field_widget_WIDGET_ID_form_alter().
 *
 * Required for publish/unpublish state from scheduler_content_moderation_integration.
 *
 */
function burdastyle_article_field_widget_scheduler_moderation_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (\Drupal::currentUser()->hasPermission('schedule publishing of nodes')) {
    if (isset($element['#options']['published'])) {
      $element['#default_value'] = ['published'];
    }
    if (isset($element['#options']['unpublished'])) {
      $element['#default_value'] = ['unpublished'];
    }
  }
}
